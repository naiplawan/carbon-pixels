'use client';

import React from 'react';
import { motion, AnimatePresence, Variants } from 'framer-motion';

// Animation variants for different navigation transitions
export const navigationVariants: Record<string, Variants> = {
  // Page transitions
  slideInLeft: {
    initial: { x: '-100%', opacity: 0 },
    animate: { x: 0, opacity: 1 },
    exit: { x: '100%', opacity: 0 }
  },
  
  slideInRight: {
    initial: { x: '100%', opacity: 0 },
    animate: { x: 0, opacity: 1 },
    exit: { x: '-100%', opacity: 0 }
  },
  
  slideInUp: {
    initial: { y: '100%', opacity: 0 },
    animate: { y: 0, opacity: 1 },
    exit: { y: '-100%', opacity: 0 }
  },
  
  slideInDown: {
    initial: { y: '-100%', opacity: 0 },
    animate: { y: 0, opacity: 1 },
    exit: { y: '100%', opacity: 0 }
  },

  // Fade transitions
  fadeIn: {
    initial: { opacity: 0, scale: 0.95 },
    animate: { opacity: 1, scale: 1 },
    exit: { opacity: 0, scale: 0.95 }
  },

  // Scale transitions
  scaleIn: {
    initial: { scale: 0.8, opacity: 0 },
    animate: { scale: 1, opacity: 1 },
    exit: { scale: 0.8, opacity: 0 }
  },

  // Bounce animations
  bounceIn: {
    initial: { scale: 0, opacity: 0 },
    animate: { 
      scale: 1, 
      opacity: 1,
      transition: {
        type: 'spring',
        stiffness: 500,
        damping: 25,
        duration: 0.6
      }
    },
    exit: { 
      scale: 0, 
      opacity: 0,
      transition: { duration: 0.2 }
    }
  },

  // Thai-inspired wave animation
  thaiWave: {
    initial: { 
      x: -20,
      opacity: 0,
      rotate: -5
    },
    animate: { 
      x: 0,
      opacity: 1,
      rotate: 0,
      transition: {
        type: 'spring',
        stiffness: 200,
        damping: 20,
        mass: 1
      }
    },
    exit: { 
      x: 20,
      opacity: 0,
      rotate: 5,
      transition: { duration: 0.2 }
    }
  }
};

// Spring configurations for different interaction types
export const springConfigs = {
  gentle: {
    type: 'spring' as const,
    stiffness: 200,
    damping: 25,
    mass: 1
  },
  
  snappy: {
    type: 'spring' as const,
    stiffness: 400,
    damping: 25,
    mass: 0.8
  },
  
  bouncy: {
    type: 'spring' as const,
    stiffness: 300,
    damping: 15,
    mass: 1.2
  },
  
  quick: {
    type: 'tween' as const,
    duration: 0.2,
    ease: [0.4, 0, 0.2, 1]
  },
  
  smooth: {
    type: 'tween' as const,
    duration: 0.3,
    ease: [0.4, 0, 0.6, 1]
  }
};

// Component for page transition wrapper
interface PageTransitionProps {
  children: React.ReactNode;
  direction?: 'left' | 'right' | 'up' | 'down' | 'fade' | 'scale';
  className?: string;
}

export function PageTransition({ 
  children, 
  direction = 'fade',
  className = ''
}: PageTransitionProps) {
  const getVariant = () => {
    switch (direction) {
      case 'left': return navigationVariants.slideInLeft;
      case 'right': return navigationVariants.slideInRight;
      case 'up': return navigationVariants.slideInUp;
      case 'down': return navigationVariants.slideInDown;
      case 'scale': return navigationVariants.scaleIn;
      default: return navigationVariants.fadeIn;
    }
  };

  return (
    <motion.div
      className={className}
      variants={getVariant()}
      initial="initial"
      animate="animate"
      exit="exit"
      transition={springConfigs.smooth}
    >
      {children}
    </motion.div>
  );
}

// Staggered animation container for lists
interface StaggerContainerProps {
  children: React.ReactNode;
  staggerDelay?: number;
  className?: string;
}

export function StaggerContainer({ 
  children, 
  staggerDelay = 0.05,
  className = ''
}: StaggerContainerProps) {
  const containerVariants: Variants = {
    initial: { opacity: 0 },
    animate: {
      opacity: 1,
      transition: {
        staggerChildren: staggerDelay,
        delayChildren: 0.1
      }
    },
    exit: {
      opacity: 0,
      transition: {
        staggerChildren: staggerDelay,
        staggerDirection: -1
      }
    }
  };

  const childVariants: Variants = {
    initial: { 
      y: 20, 
      opacity: 0,
      scale: 0.95
    },
    animate: { 
      y: 0, 
      opacity: 1,
      scale: 1,
      transition: springConfigs.gentle
    },
    exit: { 
      y: -20, 
      opacity: 0,
      scale: 0.95,
      transition: springConfigs.quick
    }
  };

  return (
    <motion.div
      className={className}
      variants={containerVariants}
      initial="initial"
      animate="animate"
      exit="exit"
    >
      {React.Children.map(children, (child) => (
        <motion.div variants={childVariants}>
          {child}
        </motion.div>
      ))}
    </motion.div>
  );
}

// Floating animation for FAB and floating elements
interface FloatingAnimationProps {
  children: React.ReactNode;
  intensity?: 'subtle' | 'normal' | 'strong';
  direction?: 'vertical' | 'horizontal' | 'circular';
  className?: string;
}

export function FloatingAnimation({
  children,
  intensity = 'normal',
  direction = 'vertical',
  className = ''
}: FloatingAnimationProps) {
  const getAnimationProps = () => {
    const intensityMap = {
      subtle: { range: 3, duration: 3 },
      normal: { range: 5, duration: 2.5 },
      strong: { range: 8, duration: 2 }
    };

    const { range, duration } = intensityMap[intensity];

    switch (direction) {
      case 'horizontal':
        return {
          animate: {
            x: [0, range, 0, -range, 0],
          },
          transition: {
            duration,
            repeat: Infinity,
            ease: [0.4, 0, 0.6, 1]
          }
        };
      
      case 'circular':
        return {
          animate: {
            x: [0, range, 0, -range, 0],
            y: [0, -range, 0, range, 0],
          },
          transition: {
            duration: duration * 1.5,
            repeat: Infinity,
            ease: [0.4, 0, 0.6, 1]
          }
        };
      
      default: // vertical
        return {
          animate: {
            y: [0, -range, 0, range, 0],
          },
          transition: {
            duration,
            repeat: Infinity,
            ease: [0.4, 0, 0.6, 1]
          }
        };
    }
  };

  return (
    <motion.div
      className={className}
      {...getAnimationProps()}
    >
      {children}
    </motion.div>
  );
}

// Pulse animation for attention-grabbing elements
interface PulseAnimationProps {
  children: React.ReactNode;
  color?: string;
  intensity?: 'subtle' | 'normal' | 'strong';
  className?: string;
}

export function PulseAnimation({
  children,
  color = 'rgba(16, 185, 129, 0.3)',
  intensity = 'normal',
  className = ''
}: PulseAnimationProps) {
  const intensityMap = {
    subtle: { scale: [1, 1.02, 1], duration: 2 },
    normal: { scale: [1, 1.05, 1], duration: 1.5 },
    strong: { scale: [1, 1.1, 1], duration: 1 }
  };

  const { scale, duration } = intensityMap[intensity];

  return (
    <motion.div
      className={`relative ${className}`}
      animate={{ scale }}
      transition={{
        duration,
        repeat: Infinity,
        ease: [0.4, 0, 0.6, 1]
      }}
    >
      {children}
      
      {/* Pulse ring effect */}
      <motion.div
        className="absolute inset-0 rounded-full pointer-events-none"
        style={{ backgroundColor: color }}
        animate={{
          scale: [1, 1.5, 2],
          opacity: [0.5, 0.2, 0]
        }}
        transition={{
          duration: duration * 2,
          repeat: Infinity,
          ease: [0.4, 0, 0.2, 1]
        }}
      />
    </motion.div>
  );
}

// Thai-inspired decorative animation
interface ThaiDecorativeAnimationProps {
  children: React.ReactNode;
  pattern?: 'lotus' | 'wave' | 'temple' | 'traditional';
  className?: string;
}

export function ThaiDecorativeAnimation({
  children,
  pattern = 'lotus',
  className = ''
}: ThaiDecorativeAnimationProps) {
  const getPatternAnimation = () => {
    switch (pattern) {
      case 'wave':
        return {
          animate: {
            backgroundPosition: ['0% 50%', '100% 50%', '0% 50%'],
          },
          transition: {
            duration: 8,
            repeat: Infinity,
            ease: "linear"
          }
        };
      
      case 'lotus':
        return {
          animate: {
            rotate: [0, 2, -2, 0],
            scale: [1, 1.02, 1]
          },
          transition: {
            duration: 4,
            repeat: Infinity,
            ease: [0.4, 0, 0.6, 1]
          }
        };
      
      case 'temple':
        return {
          animate: {
            y: [0, -1, 1, 0],
          },
          transition: {
            duration: 6,
            repeat: Infinity,
            ease: [0.4, 0, 0.6, 1]
          }
        };
      
      default:
        return {
          animate: {
            opacity: [0.8, 1, 0.8],
          },
          transition: {
            duration: 3,
            repeat: Infinity,
            ease: [0.4, 0, 0.6, 1]
          }
        };
    }
  };

  return (
    <motion.div
      className={`relative ${className}`}
      {...getPatternAnimation()}
    >
      {children}
      
      {/* Thai decorative overlay */}
      <div 
        className="absolute inset-0 pointer-events-none opacity-5"
        style={{
          backgroundImage: `url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23fbbf24' fill-opacity='0.1'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E")`
        }}
      />
    </motion.div>
  );
}

// Haptic feedback utility class
export class HapticFeedback {
  private static enabled = true;

  static setEnabled(enabled: boolean) {
    HapticFeedback.enabled = enabled;
  }

  static isSupported(): boolean {
    return typeof window !== 'undefined' && 'vibrate' in navigator;
  }

  static trigger(type: 'light' | 'medium' | 'heavy' | 'error' | 'success' | 'warning' = 'light') {
    if (!HapticFeedback.enabled || !HapticFeedback.isSupported()) {
      return;
    }

    const patterns = {
      light: 10,
      medium: 20,
      heavy: 50,
      error: [25, 100, 25],
      success: [10, 50, 10, 50, 10],
      warning: [50, 50, 50]
    };

    try {
      navigator.vibrate(patterns[type]);
    } catch (error) {
      console.warn('Haptic feedback failed:', error);
    }
  }

  // Thai cultural feedback patterns
  static triggerThai(type: 'wai' | 'temple_bell' | 'lotus_bloom' = 'wai') {
    if (!HapticFeedback.enabled || !HapticFeedback.isSupported()) {
      return;
    }

    const thaiPatterns = {
      wai: [15, 50, 15, 50, 15], // Gentle greeting pattern
      temple_bell: [100, 200, 100], // Temple bell resonance
      lotus_bloom: [10, 30, 10, 30, 10, 30, 10] // Delicate blooming pattern
    };

    try {
      navigator.vibrate(thaiPatterns[type]);
    } catch (error) {
      console.warn('Thai haptic feedback failed:', error);
    }
  }
}

// Hook for animation controls
export function useNavigationAnimations() {
  const [isAnimating, setIsAnimating] = React.useState(false);

  const triggerAnimation = React.useCallback((type: keyof typeof HapticFeedback.trigger) => {
    setIsAnimating(true);
    HapticFeedback.trigger(type as any);
    
    setTimeout(() => {
      setIsAnimating(false);
    }, 500);
  }, []);

  return {
    isAnimating,
    triggerAnimation,
    variants: navigationVariants,
    springs: springConfigs,
    haptic: HapticFeedback
  };
}